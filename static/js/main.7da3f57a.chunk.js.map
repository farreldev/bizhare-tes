{"version":3,"sources":["components/Autocomplete/index.js","config.js","container/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","listAutocomplete","useState","suggestion","setSuggestion","hidding","setHidding","filterList","filter","list","area","toLowerCase","indexOf","className","onKeyDown","onBlur","onChange","e","value","target","onTxtChange","type","placeholder","map","item","i","onClick","console","log","key","Home","state","locations","textInput","urlAPI","config","fetch","data","json","result","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4TAiDeA,EA/CM,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,iBAAsB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,OAGbF,oBAAS,GAHI,mBAGpCG,EAHoC,KAG3BC,EAH2B,KAmBvCC,EAAaN,EAAiBO,QAAO,SAAAC,GACvC,OAAsE,IAA/DA,EAAKC,KAAKC,cAAcC,QAAQT,EAAWQ,kBAGpD,OACE,yBAAKE,UAAU,aACb,+CACA,yBAAKA,UAAU,gBACb,2BACEC,UAdS,WACfR,GAAW,IAcLS,OAnBU,WAChBT,GAAW,IAmBLU,SAAU,SAACC,GAAD,OAzBE,SAACA,GACnB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBd,EAAcc,GAuBSE,CAAYH,IAC7BI,KAAK,OACLC,YAAY,gCAEbjB,GAAW,wBAAIQ,UAAU,oBAEtBN,EAAWgB,KAAI,SAACC,EAAMC,GACpB,OAAO,wBAAIC,QAAS,kBAAMC,QAAQC,IAAIJ,EAAKd,OAAOmB,IAAKJ,GAAG,8BAAOD,EAAKd,aCvCrE,EAEP,mDC6BOoB,E,2MAzBZC,MAAQ,CACLC,UAAW,GACXC,UAAW,I,8MAILC,EAASC,E,SACMC,MAAMF,G,cAArBG,E,gBACeA,EAAKC,O,OAApBC,E,OAENC,KAAKC,SAAS,CACXT,UAAWO,EAAOP,Y,qIAId,IACCA,EAAcQ,KAAKT,MAAnBC,UACR,OACG,kBAAC,WAAD,KACG,kBAAC,EAAD,CAAc/B,iBAAmB+B,S,GArB1BU,aCUJC,E,iLARX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,W,GAJU6B,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.7da3f57a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Autocomplete = ({listAutocomplete}) => {\r\n  \r\n  const [suggestion, setSuggestion] = useState('');\r\n  const [hidding, setHidding] = useState(true);\r\n  \r\n  const onTxtChange = (e) => {\r\n    const value = e.target.value;\r\n    setSuggestion(value)\r\n  }\r\n\r\n  const onBlurTxt = () => {\r\n    setHidding(true)\r\n  }\r\n\r\n  const showList = () => {\r\n    setHidding(false)\r\n  }\r\n\r\n\r\n  let filterList = listAutocomplete.filter(list => {\r\n    return list.area.toLowerCase().indexOf(suggestion.toLowerCase()) !== -1;\r\n  })\r\n\r\n  return (\r\n    <div className=\"boxSearch\">\r\n      <h1>Find Our Doctor</h1>\r\n      <div className=\"autocomplete\">\r\n        <input\r\n          onKeyDown={showList}\r\n          onBlur={onBlurTxt} \r\n          onChange={(e) => onTxtChange(e)} \r\n          type=\"text\" \r\n          placeholder=\"Type the area - ex: Depok\"/>\r\n      </div>\r\n      { !hidding && <ul className=\"autocompleteList\">\r\n          {\r\n            filterList.map((item, i) => {\r\n              return <li onClick={() => console.log(item.area)} key={i}><span>{item.area}</span></li>\r\n            })\r\n          }\r\n        </ul> \r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Autocomplete;","export default {\r\n   // url: 'http://52.76.85.10/test/',\r\n   url: 'https://www.mocky.io/v2/5e705e363000006a007a2e1d'\r\n}","import React, { Component, Fragment } from 'react';\r\nimport Autocomplete from '../../components/Autocomplete';\r\nimport config from '../../config.js';\r\n\r\nclass Home extends Component {\r\n\r\n   state = {\r\n      locations: [],\r\n      textInput: '',\r\n   }\r\n\r\n   async componentDidMount() {\r\n      const urlAPI = config.url,\r\n            data   = await fetch(urlAPI),\r\n            result = await data.json()\r\n            \r\n      this.setState({\r\n         locations: result.locations\r\n      })\r\n   }\r\n\r\n   render() {\r\n      const { locations } = this.state\r\n      return (\r\n         <Fragment>\r\n            <Autocomplete listAutocomplete={ locations }/>\r\n         </Fragment>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport './App.scss';\nimport Home from './container/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}